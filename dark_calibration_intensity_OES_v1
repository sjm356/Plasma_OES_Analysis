# -*- coding: utf-8 -*-
"""
Created on Thu Nov 14 00:00:38 2019

@author: jmsong

v1: Subtracting dark intensity and calibrating intensity with dark intensity files and calibration coefficient file
"""
from tkinter import *
from tkinter import filedialog
import os
import re
import numpy as np

# Loading OES data files
# root = Tk()
file_path = filedialog.askdirectory(initialdir="C:\\Users\\jmsong\\Documents\\00_NFRI\\00_연구관리\\00_실험데이터\\01_OES", title="Select OES data Folder")

root = Tk()

# File path containing NOMADlite data
# Spectrum data only
# file_path = '/Users/jmsong/Documents/00_NFRI/00_연구관리/00_실험데이터/05_CR/data'
file_list = os.listdir(file_path)
new_file_list = []
file_list.sort()

# Defining new directory for new output file
new_file_path = file_path + '/after_cal'
# Making new folder in directory
if not os.path.exists(new_file_path):
    os.mkdir(new_file_path)
    
# Making files for intensity ans ratio values depending on the experiment condition
new_file_name_intensity = "peak intensity"
new_file_name_ratio = "peak ratio"
new_file_intensity_total = open(new_file_path + "/" + new_file_name_intensity + ".dat",'w')
new_file_ratio_total = open(new_file_path + "/" + new_file_name_ratio + ".dat",'w')
new_file_intensity_total.write(f'filename \t')
new_file_ratio_total.write(f'filename \t')

# Loading dark intensity folder path and calibration file
dark_intensity_folder_path = filedialog.askdirectory(initialdir="C:\\Users\\jmsong\\Documents\\00_NFRI\\00_연구관리\\00_실험데이터\\01_OES", title="Select up wavelength file")
calibration_coeff_file = filedialog.askopenfilename(initialdir="C:\\Users\\jmsong\\Documents\\00_NFRI\\00_연구관리\\00_실험데이터\\01_OES", title="Select lo wavelength file")

# reading intensity files
if len(file_list) == 0:
    print('!!No data files in this directory')

for k in file_list:
    if k == 'new_output':
        continue
    with open(file_path + "/"+ k) as data:
        lines = data.readlines()
        data.close()
    
    lines_array = np.array(lines[0:])     # reading each line with string type with list format
    new_lines_array = np.zeros((len(lines_array),2),dtype = float)      # making new array with [n,2] matrix form for saving with floating type
    
        # Making and opening new output file (ph=peak height)
    ph_file_name = "ph_intensity_" + k
    ph_ratio_file_name = "ph_ratio_" + k
    intensity_file = open(file_path + "/new_output/" + ph_file_name,'w')
    ratio_file = open(file_path + "/new_output/" + ph_ratio_file_name,'w')
    intensity_file.write(f'Wavelength(nm) \t Intensity \n')
    ratio_file.write(f'Wavelength_numerator \t Wavelength_denominator \t ratio_value \n')
    new_file_ratio_total.write(f'{k} \t')
    new_file_intensity_total.write(f'{k} \t')
                
    for l, new_line in enumerate(lines_array):
        nnew_line = new_line.split('\t')  # Splitting with tap
        new_lines_array[l,0] = nnew_line[0]
        new_lines_array[l,1] = nnew_line[1]
    
    for i,ii in enumerate(lines_up):
        peak_up_intensity[i,0] = new_lines_array[np.where(new_lines_array[:,0] == float(ii)), 0]
        peak_up_intensity[i,1] = new_lines_array[np.where(new_lines_array[:,0] == float(ii)), 1]
        
    for j,jj in enumerate(lines_lo):
        peak_lo_intensity[j,0] = new_lines_array[np.where(new_lines_array[:,0] == float(jj)), 0]
        peak_lo_intensity[j,1] = new_lines_array[np.where(new_lines_array[:,0] == float(jj)), 1]
        
    peak_intensity = np.r_[peak_up_intensity, peak_lo_intensity]
    a = 0
    for k1 in range(len(peak_lo_intensity)):
        for k2 in range(len(peak_up_intensity)):
            peak_ratio[a,0] = peak_up_intensity[k2, 0]
            peak_ratio[a,1] = peak_lo_intensity[k1, 0]
            peak_ratio[a,2] = peak_up_intensity[k2, 1] / peak_lo_intensity[k1, 1]
            
            peak_ratio_wave_up = peak_up_intensity[k2, 0]
            peak_ratio_wave_lo = peak_lo_intensity[k1, 0]
            peak_ratio_one = peak_up_intensity[k2, 1] / peak_lo_intensity[k1, 1]
            ratio_file.write(f'{peak_ratio_wave_up} \t {peak_ratio_wave_lo} \t {peak_ratio_one} \n')
            new_file_ratio_total.write(f'{peak_ratio_one} \t')
    new_file_ratio_total.write(f'\n')   # Moving cursor

    for nnn in range(len(peak_intensity)):
        peak_intensity_wavelength = peak_intensity[nnn, 0]
        peak_intensity_one = peak_intensity[nnn, 1]
        intensity_file.write(f'{peak_intensity_wavelength} \t {peak_intensity_one} \n')
        new_file_intensity_total.write(f'{peak_intensity_one} \t')
    new_file_intensity_total.write(f'\n')   # Moving cursor

    ratio_file.close()
    intensity_file.close()
new_file_intensity_total.close()
new_file_ratio_total.close()